# -*- coding: utf-8 -*-
"""sensitivity analysis for no correlation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17UIcPBl4Ca1WV-FZLU97eO6-gE4KlmVc
"""

# Python code to generate the 12 sensitivity plots (reinsurance + investment for 2 firms x 3 parameters),
# save images, create a summary table, and zip everything for download.
# This will run here and produce the files in /mnt/data. No external web access is used.

import numpy as np
import matplotlib.pyplot as plt
import os
import csv
import zipfile
from datetime import datetime
from google.colab import files

# --- Settings (realistic, but can be changed) ---
T = 10.0                # 10-year horizon as requested
r = 0.05                # risk-free rate (5%)
gamma = 0.50            # risk aversion (CARA)
mu1, sigma1 = 0.08, 0.20   # company 1: market drift & vol
mu2, sigma2 = 0.10, 0.25   # company 2: market drift & vol

# Time grid
n_points = 400
t = np.linspace(0, T, n_points)
time_factor = np.exp(-r * (T - t))  # e^{-r(T-t)}

# Investment (closed-form candidates, deterministic, decoupled from insurance params)
def investment_strategies(time_factor):
    pi1 = - (mu1 - r) / (gamma * sigma1**2) * time_factor
    pi2 =   (mu2 - r) / (gamma * sigma2**2) * time_factor
    return pi1, pi2

pi1_line, pi2_line = investment_strategies(time_factor)

# clipping for reinsurance (feasible set [0,1])
def clip_reinsurance(p):
    return np.clip(p, 0.0, 1.0)

# Output directory
out_dir = "/mnt/data/sensitivity_results"
os.makedirs(out_dir, exist_ok=True)
fig_files = []

# ---------- 1) Sweep alpha (composite reinsurance sensitivity) ----------
alpha_values = [0.10, 0.20, 0.30, 0.40, 0.50]  # realistic sweep of composite α = λ/b^2
# Company 1 reinsurance
plt.figure()
for alpha in alpha_values:
    p1_cand = (alpha / gamma) * time_factor
    p1_impl = clip_reinsurance(p1_cand)
    plt.plot(t, p1_impl, linewidth=1.5, label=f"α={alpha}")
plt.xlabel("Time (years)")
plt.ylabel("Reinsurance retention p1(t)")
plt.title("Company 1: Reinsurance retention — sensitivity to α (λ/b²)")
plt.ylim(-0.05, 1.05)
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "alpha_company1_reinsurance.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

# Company 2 reinsurance
plt.figure()
for alpha in alpha_values:
    p2_cand = (alpha / gamma) * time_factor
    p2_impl = clip_reinsurance(p2_cand)
    plt.plot(t, p2_impl, linewidth=1.5, linestyle="--", label=f"α={alpha}")
plt.xlabel("Time (years)")
plt.ylabel("Reinsurance retention p2(t)")
plt.title("Company 2: Reinsurance retention — sensitivity to α (λ/b²)")
plt.ylim(-0.05, 1.05)
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "alpha_company2_reinsurance.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

# Company 1 investment (investment is theoretically insensitive; lines will coincide)
plt.figure()
for alpha in alpha_values:
    plt.plot(t, pi1_line, linewidth=1.5, label=f"α={alpha}")
plt.xlabel("Time (years)")
plt.ylabel("Investment π1(t)")
plt.title("Company 1: Investment strategy — sensitivity to α (shows insensitivity)")
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "alpha_company1_investment.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

# Company 2 investment
plt.figure()
for alpha in alpha_values:
    plt.plot(t, pi2_line, linewidth=1.5, linestyle="--", label=f"α={alpha}")
plt.xlabel("Time (years)")
plt.ylabel("Investment π2(t)")
plt.title("Company 2: Investment strategy — sensitivity to α (shows insensitivity)")
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "alpha_company2_investment.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)


# ---------- 2) Sweep lambda (reinsurance premium) ----------
lambda_values = [0.10, 0.20, 0.30, 0.40, 0.50]  # plausible premium loadings
# pick company-specific b values for the lambda sweep (realistic differences)
b1_for_lambda = 0.50
b2_for_lambda = 0.70

plt.figure()
for lam in lambda_values:
    p1_cand = (lam / (gamma * b1_for_lambda**2)) * time_factor
    p1_impl = clip_reinsurance(p1_cand)
    plt.plot(t, p1_impl, linewidth=1.5, label=f"λ={lam}")
plt.xlabel("Time (years)")
plt.ylabel("Reinsurance retention p1(t)")
plt.title(f"Company 1: Reinsurance retention — sensitivity to λ (b={b1_for_lambda})")
plt.ylim(-0.05, 1.05)
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "lambda_company1_reinsurance.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

plt.figure()
for lam in lambda_values:
    p2_cand = (lam / (gamma * b2_for_lambda**2)) * time_factor
    p2_impl = clip_reinsurance(p2_cand)
    plt.plot(t, p2_impl, linewidth=1.5, linestyle="--", label=f"λ={lam}")
plt.xlabel("Time (years)")
plt.ylabel("Reinsurance retention p2(t)")
plt.title(f"Company 2: Reinsurance retention — sensitivity to λ (b={b2_for_lambda})")
plt.ylim(-0.05, 1.05)
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "lambda_company2_reinsurance.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

# Investment plots (again insensitive; repeated lines)
plt.figure()
for lam in lambda_values:
    plt.plot(t, pi1_line, linewidth=1.5, label=f"λ={lam}")
plt.xlabel("Time (years)")
plt.ylabel("Investment π1(t)")
plt.title("Company 1: Investment strategy — sensitivity to λ (shows insensitivity)")
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "lambda_company1_investment.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

plt.figure()
for lam in lambda_values:
    plt.plot(t, pi2_line, linewidth=1.5, linestyle="--", label=f"λ={lam}")
plt.xlabel("Time (years)")
plt.ylabel("Investment π2(t)")
plt.title("Company 2: Investment strategy — sensitivity to λ (shows insensitivity)")
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "lambda_company2_investment.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)


# ---------- 3) Sweep b (claim volatility) ----------
b_values = [0.20, 0.40, 0.60, 0.80, 1.00]  # plausible claim volatilities
lambda_for_b = 0.20  # fix lambda to see effect of b

plt.figure()
for bval in b_values:
    p1_cand = (lambda_for_b / (gamma * bval**2)) * time_factor
    p1_impl = clip_reinsurance(p1_cand)
    plt.plot(t, p1_impl, linewidth=1.5, label=f"b={bval}")
plt.xlabel("Time (years)")
plt.ylabel("Reinsurance retention p1(t)")
plt.title(f"Company 1: Reinsurance retention — sensitivity to b (λ={lambda_for_b})")
plt.ylim(-0.05, 1.05)
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "b_company1_reinsurance.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

plt.figure()
for bval in b_values:
    p2_cand = (lambda_for_b / (gamma * bval**2)) * time_factor
    p2_impl = clip_reinsurance(p2_cand)
    plt.plot(t, p2_impl, linewidth=1.5, linestyle="--", label=f"b={bval}")
plt.xlabel("Time (years)")
plt.ylabel("Reinsurance retention p2(t)")
plt.title(f"Company 2: Reinsurance retention — sensitivity to b (λ={lambda_for_b})")
plt.ylim(-0.05, 1.05)
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "b_company2_reinsurance.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

# Investment insensitive to b (repeat lines)
plt.figure()
for bval in b_values:
    plt.plot(t, pi1_line, linewidth=1.5, label=f"b={bval}")
plt.xlabel("Time (years)")
plt.ylabel("Investment π1(t)")
plt.title("Company 1: Investment strategy — sensitivity to b (shows insensitivity)")
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "b_company1_investment.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

plt.figure()
for bval in b_values:
    plt.plot(t, pi2_line, linewidth=1.5, linestyle="--", label=f"b={bval}")
plt.xlabel("Time (years)")
plt.ylabel("Investment π2(t)")
plt.title("Company 2: Investment strategy — sensitivity to b (shows insensitivity)")
plt.grid(True, alpha=0.3)
plt.legend()
fname = os.path.join(out_dir, "b_company2_investment.png")
plt.tight_layout()
plt.savefig(fname, dpi=300)
plt.close()
fig_files.append(fname)

# ---------- Create summary table of parameter values used ----------
summary_csv = os.path.join(out_dir, "sensitivity_table.csv")
with open(summary_csv, "w", newline="") as f:
    writer = csv.writer(f)
    writer.writerow(["Parameter", "Values_used", "Notes"])
    writer.writerow(["Time horizon T (years)", T, "10-year horizon requested"])
    writer.writerow(["Risk aversion γ", gamma, "CARA parameter"])
    writer.writerow(["Risk-free rate r", r, "Annual"])
    writer.writerow(["mu1, sigma1", f"{mu1}, {sigma1}", "Market params company 1"])
    writer.writerow(["mu2, sigma2", f"{mu2}, {sigma2}", "Market params company 2"])
    writer.writerow(["Alpha sweep (α = λ/b²)", ", ".join(map(str, alpha_values)), "Composite sensitivity values"])
    writer.writerow(["Lambda sweep (λ)", ", ".join(map(str, lambda_values)), f"Used b1={b1_for_lambda}, b2={b2_for_lambda} for companies"])
    writer.writerow(["b sweep (b)", ", ".join(map(str, b_values)), f"Used λ={lambda_for_b} for sweep"])
fig_files.append(summary_csv)

# ---------- Zip all generated files ----------
zip_path = "/mnt/data/sensitivity_plots_{}.zip".format(datetime.now().strftime("%Y%m%d_%H%M%S"))
with zipfile.ZipFile(zip_path, "w", compression=zipfile.ZIP_DEFLATED) as zf:
    for fp in fig_files:
        zf.write(fp, arcname=os.path.basename(fp))

# List output files for user
output_listing = {
    "zip_path": zip_path,
    "files_created": [os.path.basename(p) for p in fig_files]
}
output_listing

# Download the zip file
files.download(zip_path)